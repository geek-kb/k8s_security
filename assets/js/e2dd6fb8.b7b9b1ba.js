"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[2680],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},8488:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"best_practices/cluster_setup_and_hardening/api_server_security/opa_gatekeeper","title":"Open Policy Agent (OPA) / Gatekeeper","description":"OPA and Gatekeeper bring policy-based governance to Kubernetes, enabling fine-grained access control, resource validation, and compliance enforcement.","source":"@site/docs/best_practices/cluster_setup_and_hardening/api_server_security/opa_gatekeeper.md","sourceDirName":"best_practices/cluster_setup_and_hardening/api_server_security","slug":"/best_practices/cluster_setup_and_hardening/api_server_security/opa_gatekeeper","permalink":"/docs/best_practices/cluster_setup_and_hardening/api_server_security/opa_gatekeeper","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Itai Ganot","lastUpdatedAt":1742842158000,"sidebarPosition":3,"frontMatter":{"title":"Open Policy Agent (OPA) / Gatekeeper","description":"OPA and Gatekeeper bring policy-based governance to Kubernetes, enabling fine-grained access control, resource validation, and compliance enforcement.","sidebar_position":3},"sidebar":"default","previous":{"title":"Securing Kubernetes Admission Controllers","permalink":"/docs/best_practices/cluster_setup_and_hardening/api_server_security/misconfigured_admission_controllers_mitigation"},"next":{"title":"Kyverno","permalink":"/docs/best_practices/cluster_setup_and_hardening/api_server_security/kyverno"}}');var r=s(4848),i=s(8453);const a={title:"Open Policy Agent (OPA) / Gatekeeper",description:"OPA and Gatekeeper bring policy-based governance to Kubernetes, enabling fine-grained access control, resource validation, and compliance enforcement.",sidebar_position:3},c="Open Policy Agent (OPA) / Gatekeeper",l={},o=[{value:"Usage",id:"usage",level:2},{value:"1. Install Gatekeeper in Your Cluster",id:"1-install-gatekeeper-in-your-cluster",level:3},{value:"2. Define a Constraint Template",id:"2-define-a-constraint-template",level:3},{value:"3. Apply a Constraint",id:"3-apply-a-constraint",level:3},{value:"4. Test the Policy",id:"4-test-the-policy",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"open-policy-agent-opa--gatekeeper",children:"Open Policy Agent (OPA) / Gatekeeper"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Required knowledge for the CKS certification."})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Open Policy Agent (OPA)"})," is a ",(0,r.jsx)(n.strong,{children:"general-purpose policy engine"})," that uses a declarative language called ",(0,r.jsx)(n.strong,{children:"Rego"})," to define and enforce rules across systems. In Kubernetes, OPA integrates through ",(0,r.jsx)(n.strong,{children:"Gatekeeper"}),", a controller that acts as an ",(0,r.jsx)(n.strong,{children:"admission webhook"}),", intercepting API server requests and enforcing policies before resources are created or modified."]}),"\n",(0,r.jsxs)(n.p,{children:["With OPA/Gatekeeper, teams can ensure ",(0,r.jsx)(n.strong,{children:"consistent security, compliance, and operational practices"})," by defining custom rules for how Kubernetes resources should behave."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"1-install-gatekeeper-in-your-cluster",children:"1. Install Gatekeeper in Your Cluster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.14/deploy/gatekeeper.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify installation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl get pods -n gatekeeper-system\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-define-a-constraint-template",children:"2. Define a Constraint Template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredlabels\n\n        violation[{"msg": msg}] {\n          required := {"app"}\n          provided := {label | input.review.object.metadata.labels[label]}\n          missing := required - provided\n          count(missing) > 0\n          msg := sprintf("Missing required labels: %v", [missing])\n        }\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-apply-a-constraint",children:"3. Apply a Constraint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: must-have-app-label\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This constraint ensures every Pod has an ",(0,r.jsx)(n.code,{children:"app"})," label."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"4-test-the-policy",children:"4. Test the Policy"}),"\n",(0,r.jsx)(n.p,{children:"Try creating a pod without the required label:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl run test --image=nginx\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gatekeeper will deny the request with a message explaining the violation."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"Constraint Templates"})," to define reusable policy logic and ",(0,r.jsx)(n.strong,{children:"Constraints"})," to enforce them."]}),"\n",(0,r.jsxs)(n.li,{children:["Store policies in ",(0,r.jsx)(n.strong,{children:"version-controlled repositories"})," and apply them through GitOps pipelines."]}),"\n",(0,r.jsxs)(n.li,{children:["Regularly audit applied constraints using Gatekeeper\u2019s ",(0,r.jsx)(n.strong,{children:"audit functionality"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"OPA outside of Kubernetes"})," to enforce policies in CI/CD pipelines, Terraform, APIs, and more."]}),"\n",(0,r.jsxs)(n.li,{children:["Validate configurations with ",(0,r.jsx)(n.strong,{children:"dry-run mode"})," before enforcing policies in production."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OPA Website:"})," ",(0,r.jsx)(n.a,{href:"https://www.openpolicyagent.org",children:"https://www.openpolicyagent.org"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Gatekeeper Project:"})," ",(0,r.jsx)(n.a,{href:"https://github.com/open-policy-agent/gatekeeper",children:"https://github.com/open-policy-agent/gatekeeper"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OPA GitHub:"})," ",(0,r.jsx)(n.a,{href:"https://github.com/open-policy-agent/opa",children:"https://github.com/open-policy-agent/opa"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);