"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[2495],{838:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"best_practices/monitoring_logging_and_runtime_security/falco","title":"Falco","description":"Falco is a runtime security tool for Kubernetes that detects abnormal behavior and threats based on system call monitoring and security rules.","source":"@site/docs/best_practices/monitoring_logging_and_runtime_security/falco.md","sourceDirName":"best_practices/monitoring_logging_and_runtime_security","slug":"/best_practices/monitoring_logging_and_runtime_security/falco","permalink":"/docs/best_practices/monitoring_logging_and_runtime_security/falco","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/best_practices/monitoring_logging_and_runtime_security/falco.md","tags":[],"version":"current","lastUpdatedBy":"Itai Ganot","lastUpdatedAt":1742824633000,"sidebarPosition":4,"frontMatter":{"title":"Falco","description":"Falco is a runtime security tool for Kubernetes that detects abnormal behavior and threats based on system call monitoring and security rules.","sidebar_position":4},"sidebar":"default","previous":{"title":"Grype","permalink":"/docs/best_practices/monitoring_logging_and_runtime_security/grype"},"next":{"title":"Tetragon","permalink":"/docs/best_practices/monitoring_logging_and_runtime_security/tetragon"}}');var t=s(4848),r=s(8453);const a={title:"Falco",description:"Falco is a runtime security tool for Kubernetes that detects abnormal behavior and threats based on system call monitoring and security rules.",sidebar_position:4},l="Falco",o={},c=[{value:"Use Cases",id:"use-cases",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Run Falco as a DaemonSet in Kubernetes",id:"run-falco-as-a-daemonset-in-kubernetes",level:3},{value:"Example Rule: Alert on Shell Spawned in a Container",id:"example-rule-alert-on-shell-spawned-in-a-container",level:3},{value:"View Real-Time Events",id:"view-real-time-events",level:3},{value:"Export Events to Alerting Tools",id:"export-events-to-alerting-tools",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"falco",children:"Falco"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required knowledge for the CKS certification."})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Falco"})," is an open-source runtime security engine developed by the CNCF. It detects unexpected or malicious behavior in Kubernetes clusters by monitoring ",(0,t.jsx)(n.strong,{children:"kernel-level system calls"})," and applying customizable security rules. Falco helps identify real-time threats such as container escapes, privilege escalations, cryptomining, and filesystem tampering."]}),"\n",(0,t.jsx)(n.p,{children:"By combining behavioral detection with Kubernetes context, Falco provides deep visibility into what\u2019s happening inside containers and nodes at runtime."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Detect container breakouts and privilege escalations."}),"\n",(0,t.jsx)(n.li,{children:"Monitor runtime behavior for policy violations."}),"\n",(0,t.jsx)(n.li,{children:"Audit workload actions like shell access or sensitive file modification."}),"\n",(0,t.jsx)(n.li,{children:"Integrate with alerting and incident response systems."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"run-falco-as-a-daemonset-in-kubernetes",children:"Run Falco as a DaemonSet in Kubernetes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"helm repo add falcosecurity https://falcosecurity.github.io/charts\nhelm install falco falcosecurity/falco --namespace falco --create-namespace\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-rule-alert-on-shell-spawned-in-a-container",children:"Example Rule: Alert on Shell Spawned in a Container"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- rule: Terminal shell in container\n  desc: A shell was spawned inside a container\n  condition: container.id != host and proc.name in (bash, sh, zsh)\n  output: "Shell spawned in container (user=%user.name command=%proc.cmdline)"\n  priority: WARNING\n'})}),"\n",(0,t.jsx)(n.h3,{id:"view-real-time-events",children:"View Real-Time Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl logs -n falco -l app=falco\n"})}),"\n",(0,t.jsx)(n.h3,{id:"export-events-to-alerting-tools",children:"Export Events to Alerting Tools"}),"\n",(0,t.jsx)(n.p,{children:"Use Falco plugins or sidecars to forward alerts to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Slack"}),"\n",(0,t.jsx)(n.li,{children:"Prometheus"}),"\n",(0,t.jsx)(n.li,{children:"Elasticsearch"}),"\n",(0,t.jsx)(n.li,{children:"Syslog"}),"\n",(0,t.jsx)(n.li,{children:"Webhooks"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy as a DaemonSet:"})," Monitor all nodes and workloads."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use tailored rulesets:"})," Tune rules based on your environment to reduce false positives."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integrate alerts into SIEM or incident response:"})," Forward alerts for real-time visibility and action."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Audit for shell access and sensitive operations:"})," Detect unexpected access to the host or critical paths."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Combine with Admission Controllers:"})," Prevent known-bad workloads at deploy-time and detect runtime issues with Falco."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Official Documentation:"})," ",(0,t.jsx)(n.a,{href:"https://falco.org/docs",children:"https://falco.org/docs"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Repository:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/falcosecurity/falco",children:"https://github.com/falcosecurity/falco"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);