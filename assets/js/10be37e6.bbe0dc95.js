"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[5224],{2034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"best_practices/cluster_setup_and_hardening/configuration_validation/conftest","title":"Conftest","description":"Conftest helps you write tests against structured configuration data using Open Policy Agent (OPA) policies.","source":"@site/docs/best_practices/cluster_setup_and_hardening/configuration_validation/conftest.md","sourceDirName":"best_practices/cluster_setup_and_hardening/configuration_validation","slug":"/best_practices/cluster_setup_and_hardening/configuration_validation/conftest","permalink":"/docs/best_practices/cluster_setup_and_hardening/configuration_validation/conftest","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/best_practices/cluster_setup_and_hardening/configuration_validation/conftest.md","tags":[],"version":"current","lastUpdatedBy":"Itai Ganot","lastUpdatedAt":1742842158000,"sidebarPosition":4,"frontMatter":{"title":"Conftest","description":"Conftest helps you write tests against structured configuration data using Open Policy Agent (OPA) policies.","sidebar_position":4}}');var i=n(4848),o=n(8453);const r={title:"Conftest",description:"Conftest helps you write tests against structured configuration data using Open Policy Agent (OPA) policies.",sidebar_position:4},c="Conftest",a={},l=[{value:"Usage",id:"usage",level:2},{value:"1. Install Conftest",id:"1-install-conftest",level:3},{value:"2. Write a Rego Policy",id:"2-write-a-rego-policy",level:3},{value:"3. Test a Kubernetes Manifest",id:"3-test-a-kubernetes-manifest",level:3},{value:"4. Test Terraform, Dockerfiles, etc.",id:"4-test-terraform-dockerfiles-etc",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"conftest",children:"Conftest"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Conftest"})," is a command-line tool that allows you to ",(0,i.jsx)(t.strong,{children:"test configuration files"})," (YAML, JSON, HCL, TOML, INI, etc.) using policies written in ",(0,i.jsx)(t.strong,{children:"Rego"}),", the policy language used by ",(0,i.jsx)(t.strong,{children:"Open Policy Agent (OPA)"}),". It enables teams to enforce security, compliance, and operational rules early in the development pipeline by testing configuration files before deployment."]}),"\n",(0,i.jsx)(t.p,{children:"Conftest is particularly valuable in Kubernetes environments where you want to validate Kubernetes manifests, Helm charts, Terraform plans, or CI/CD configuration files against custom or community-defined security policies."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.h3,{id:"1-install-conftest",children:"1. Install Conftest"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"brew install conftest\n"})}),"\n",(0,i.jsx)(t.p,{children:"Or via curl:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"curl -L https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_$(uname -s)_$(uname -m).tar.gz | tar xz\nsudo mv conftest /usr/local/bin\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"2-write-a-rego-policy",children:"2. Write a Rego Policy"}),"\n",(0,i.jsxs)(t.p,{children:["For example, to ",(0,i.jsx)(t.strong,{children:"disallow containers running as root"}),", create a policy file ",(0,i.jsx)(t.code,{children:"policy/deny-root.rego"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rego",children:'package main\n\ndeny[msg] {\n  input.kind == "Pod"\n  container := input.spec.containers[_]\n  not container.securityContext.runAsNonRoot\n  msg = sprintf("Container %s must not run as root", [container.name])\n}\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"3-test-a-kubernetes-manifest",children:"3. Test a Kubernetes Manifest"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"conftest test deployment.yaml --policy policy/\n"})}),"\n",(0,i.jsx)(t.p,{children:"If the manifest violates the policy, you'll get output like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"FAIL - deployment.yaml - Container nginx must not run as root\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"4-test-terraform-dockerfiles-etc",children:"4. Test Terraform, Dockerfiles, etc."}),"\n",(0,i.jsx)(t.p,{children:"Conftest supports testing other config formats:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"conftest test terraform.tfplan\nconftest test Dockerfile --input docker --parser docker\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Store policies in version control alongside your configuration files."}),"\n",(0,i.jsx)(t.li,{children:"Integrate Conftest in CI/CD pipelines to prevent misconfigured infrastructure from being deployed."}),"\n",(0,i.jsx)(t.li,{children:"Use community-contributed policies as a starting point (e.g., OPA Gatekeeper library)."}),"\n",(0,i.jsxs)(t.li,{children:["Write tests for both ",(0,i.jsx)(t.strong,{children:"security"})," (e.g., ",(0,i.jsx)(t.code,{children:"runAsNonRoot"}),", no ",(0,i.jsx)(t.code,{children:"hostPath"}),") and ",(0,i.jsx)(t.strong,{children:"operations"})," (e.g., mandatory labels, resource requests/limits)."]}),"\n",(0,i.jsx)(t.li,{children:"Keep policies modular and well-documented for maintainability."}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"GitHub Repository:"})," ",(0,i.jsx)(t.a,{href:"https://github.com/open-policy-agent/conftest",children:"https://github.com/open-policy-agent/conftest"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Documentation:"})," ",(0,i.jsx)(t.a,{href:"https://www.conftest.dev",children:"https://www.conftest.dev"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"OPA Policy Examples:"})," ",(0,i.jsx)(t.a,{href:"https://www.openpolicyagent.org/docs/latest/policy-language/",children:"https://www.openpolicyagent.org/docs/latest/policy-language/"})]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);