"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[8479],{8446:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"best_practices/cluster_setup_and_hardening/api_server_security/kyverno","title":"Kyverno","description":"Kyverno is a Kubernetes-native policy engine used to validate, mutate, and generate resources, enabling security, compliance, and best practice enforcement.","source":"@site/docs/best_practices/cluster_setup_and_hardening/api_server_security/kyverno.md","sourceDirName":"best_practices/cluster_setup_and_hardening/api_server_security","slug":"/best_practices/cluster_setup_and_hardening/api_server_security/kyverno","permalink":"/docs/best_practices/cluster_setup_and_hardening/api_server_security/kyverno","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Itai Ganot","lastUpdatedAt":1742842158000,"sidebarPosition":4,"frontMatter":{"title":"Kyverno","description":"Kyverno is a Kubernetes-native policy engine used to validate, mutate, and generate resources, enabling security, compliance, and best practice enforcement.","sidebar_position":4},"sidebar":"default","previous":{"title":"Open Policy Agent (OPA) / Gatekeeper","permalink":"/docs/best_practices/cluster_setup_and_hardening/api_server_security/opa_gatekeeper"},"next":{"title":"Securing etcd in Kubernetes","permalink":"/docs/best_practices/cluster_setup_and_hardening/control_plane_security/etcd_security_mitigation"}}');var i=r(4848),t=r(8453);const a={title:"Kyverno",description:"Kyverno is a Kubernetes-native policy engine used to validate, mutate, and generate resources, enabling security, compliance, and best practice enforcement.",sidebar_position:4},c="Kyverno",o={},l=[{value:"Usage",id:"usage",level:2},{value:"1. Install Kyverno in the Cluster",id:"1-install-kyverno-in-the-cluster",level:3},{value:"2. Create a Validation Policy",id:"2-create-a-validation-policy",level:3},{value:"3. Create a Mutation Policy",id:"3-create-a-mutation-policy",level:3},{value:"4. Generate Resources",id:"4-generate-resources",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kyverno",children:"Kyverno"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Kyverno"})," is a ",(0,i.jsx)(n.strong,{children:"Kubernetes-native policy engine"})," designed specifically for Kubernetes clusters. It allows platform teams and security engineers to ",(0,i.jsx)(n.strong,{children:"define and enforce policies"})," using familiar Kubernetes manifests\u2014",(0,i.jsx)(n.strong,{children:"no need to learn a new language like Rego"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["With Kyverno, you can ",(0,i.jsx)(n.strong,{children:"validate incoming resources"}),", ",(0,i.jsx)(n.strong,{children:"mutate configurations automatically"}),", and ",(0,i.jsx)(n.strong,{children:"generate new resources"})," dynamically, all using Kubernetes-native CRDs."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"1-install-kyverno-in-the-cluster",children:"1. Install Kyverno in the Cluster"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl create -f https://raw.githubusercontent.com/kyverno/kyverno/main/config/release/install.yaml\n"})}),"\n",(0,i.jsx)(n.p,{children:"Verify Kyverno is running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl get pods -n kyverno\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-create-a-validation-policy",children:"2. Create a Validation Policy"}),"\n",(0,i.jsx)(n.p,{children:"Example: Require all Pods to have resource limits defined."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: require-resource-limits\nspec:\n  validationFailureAction: enforce\n  rules:\n    - name: check-resource-limits\n      match:\n        resources:\n          kinds:\n            - Pod\n      validate:\n        message: "Resource limits and requests are required for all containers."\n        pattern:\n          spec:\n            containers:\n              - resources:\n                  requests:\n                    memory: "?*"\n                    cpu: "?*"\n                  limits:\n                    memory: "?*"\n                    cpu: "?*"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Apply the policy:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f require-resource-limits.yaml\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-create-a-mutation-policy",children:"3. Create a Mutation Policy"}),"\n",(0,i.jsx)(n.p,{children:"Automatically add a specific label to all new Pods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: add-default-label\nspec:\n  rules:\n    - name: add-label\n      match:\n        resources:\n          kinds:\n            - Pod\n      mutate:\n        patchStrategicMerge:\n          metadata:\n            labels:\n              environment: "dev"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-generate-resources",children:"4. Generate Resources"}),"\n",(0,i.jsx)(n.p,{children:"You can also create policies that generate child resources. For example, create a NetworkPolicy for every new namespace:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: generate-network-policy\nspec:\n  rules:\n    - name: generate-networkpolicy\n      match:\n        resources:\n          kinds:\n            - Namespace\n      generate:\n        kind: NetworkPolicy\n        name: default-deny\n        namespace: "{{request.object.metadata.name}}"\n        data:\n          spec:\n            podSelector: {}\n            policyTypes:\n              - Ingress\n              - Egress\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"validationFailureAction: enforce"})," for production policies, and ",(0,i.jsx)(n.code,{children:"audit"})," for testing."]}),"\n",(0,i.jsxs)(n.li,{children:["Leverage mutation policies to ",(0,i.jsx)(n.strong,{children:"standardize configurations"})," across teams."]}),"\n",(0,i.jsxs)(n.li,{children:["Store policies in ",(0,i.jsx)(n.strong,{children:"Git repositories"})," and apply them via GitOps pipelines."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"kyverno-cli"})," for testing policies before deployment."]}),"\n",(0,i.jsxs)(n.li,{children:["Regularly scan your cluster with ",(0,i.jsx)(n.strong,{children:"Kyverno's policy reports"})," to identify drift or violations."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Official Documentation:"})," ",(0,i.jsx)(n.a,{href:"https://kyverno.io",children:"https://kyverno.io"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kyverno GitHub Repository:"})," ",(0,i.jsx)(n.a,{href:"https://github.com/kyverno/kyverno",children:"https://github.com/kyverno/kyverno"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Policy Library:"})," ",(0,i.jsx)(n.a,{href:"https://kyverno.io/policies",children:"https://kyverno.io/policies"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);