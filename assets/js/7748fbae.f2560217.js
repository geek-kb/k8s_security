"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[5883],{362:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"best_practices/cluster_setup_and_hardening/network_security/network_policies","title":"Network Policies","description":"Explore how Network Policies in Kubernetes control traffic flow and enhance security.","source":"@site/docs/best_practices/cluster_setup_and_hardening/network_security/network_policies.md","sourceDirName":"best_practices/cluster_setup_and_hardening/network_security","slug":"/best_practices/cluster_setup_and_hardening/network_security/network_policies","permalink":"/k8s_security/docs/best_practices/cluster_setup_and_hardening/network_security/network_policies","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/best_practices/cluster_setup_and_hardening/network_security/network_policies.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Network Policies","description":"Explore how Network Policies in Kubernetes control traffic flow and enhance security."},"sidebar":"guidesSidebar","previous":{"title":"Kubelet Security","permalink":"/k8s_security/docs/best_practices/cluster_setup_and_hardening/kubelet_security"},"next":{"title":"Pod Security Standards (PSS)","permalink":"/k8s_security/docs/best_practices/cluster_setup_and_hardening/pod_security/pod_security_standards"}}');var t=s(4848),i=s(8453);const o={sidebar_position:5,title:"Network Policies",description:"Explore how Network Policies in Kubernetes control traffic flow and enhance security."},l="Network Policies",c={},a=[{value:"How Network Policies Work",id:"how-network-policies-work",level:2},{value:"Example: Default Deny All Policy",id:"example-default-deny-all-policy",level:2},{value:"Example: Allow Ingress from Specific Pods",id:"example-allow-ingress-from-specific-pods",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"network-policies",children:"Network Policies"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Network Policies"})," in ",(0,t.jsx)(n.strong,{children:"Kubernetes"})," are a fundamental security mechanism used to ",(0,t.jsx)(n.strong,{children:"control traffic flow"})," between ",(0,t.jsx)(n.strong,{children:"pods"})," and ",(0,t.jsx)(n.strong,{children:"external services"}),". They provide ",(0,t.jsx)(n.strong,{children:"network segmentation"})," and help enforce security policies within the ",(0,t.jsx)(n.strong,{children:"cluster"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-network-policies-work",children:"How Network Policies Work"}),"\n",(0,t.jsxs)(n.p,{children:["Network Policies use ",(0,t.jsx)(n.strong,{children:"selectors"})," and ",(0,t.jsx)(n.strong,{children:"rules"})," to define allowed traffic:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pod Selector:"})," Specifies the ",(0,t.jsx)(n.strong,{children:"pods"})," the policy applies to."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ingress Rules:"})," Define allowed ",(0,t.jsx)(n.strong,{children:"incoming traffic"})," to selected pods."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Egress Rules:"})," Define allowed ",(0,t.jsx)(n.strong,{children:"outgoing traffic"})," from selected pods."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["By default, Kubernetes allows ",(0,t.jsx)(n.strong,{children:"all traffic"})," between pods unless a ",(0,t.jsx)(n.strong,{children:"Network Policy"})," is defined to restrict it."]}),"\n",(0,t.jsx)(n.h2,{id:"example-default-deny-all-policy",children:"Example: Default Deny All Policy"}),"\n",(0,t.jsxs)(n.p,{children:["The following ",(0,t.jsx)(n.strong,{children:"Network Policy"})," enforces a ",(0,t.jsx)(n.strong,{children:"default deny-all"})," rule, blocking ",(0,t.jsx)(n.strong,{children:"all ingress and egress traffic"})," for pods in the ",(0,t.jsx)(n.code,{children:"default"})," namespace:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example-allow-ingress-from-specific-pods",children:"Example: Allow Ingress from Specific Pods"}),"\n",(0,t.jsxs)(n.p,{children:["The example below allows ingress traffic ",(0,t.jsxs)(n.strong,{children:["only from pods with the label ",(0,t.jsx)(n.code,{children:"app=frontend"})]})," to pods with the label ",(0,t.jsx)(n.code,{children:"app=backend"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-frontend-to-backend\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: backend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: frontend\n    ports:\n    - protocol: TCP\n      port: 80\n"})}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"By default, all pod-to-pod communication is allowed."})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Policies"})," restrict communication based on ",(0,t.jsx)(n.strong,{children:"selectors"})," and ",(0,t.jsx)(n.strong,{children:"rules"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"default deny-all policies"})," and explicitly allow traffic where needed."]}),"\n",(0,t.jsxs)(n.li,{children:["Combine Network Policies with ",(0,t.jsx)(n.strong,{children:"RBAC"})," and ",(0,t.jsx)(n.strong,{children:"Pod Security Standards"})," for a layered security approach."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more best practices on ",(0,t.jsx)(n.strong,{children:"Kubernetes security"}),", see ",(0,t.jsx)(n.a,{href:"/docs/best_practices/cluster_setup_and_hardening/intro",children:"Cluster Setup and Hardening"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);