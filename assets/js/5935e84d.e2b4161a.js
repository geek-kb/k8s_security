"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[3710],{2484:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"attack_vectors/insecure_rbac_permissions","title":"Insecure RBAC Permissions","description":"Understanding how overly permissive RBAC configurations can lead to unauthorized access and privilege escalation in Kubernetes.","source":"@site/docs/attack_vectors/insecure_rbac_permissions.md","sourceDirName":"attack_vectors","slug":"/attack_vectors/insecure_rbac_permissions","permalink":"/k8s_security/docs/attack_vectors/insecure_rbac_permissions","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/attack_vectors/insecure_rbac_permissions.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Insecure RBAC Permissions","description":"Understanding how overly permissive RBAC configurations can lead to unauthorized access and privilege escalation in Kubernetes."},"sidebar":"guidesSidebar","previous":{"title":"Container Escape Guide","permalink":"/k8s_security/docs/attack_vectors/container_escape"},"next":{"title":"Exposed Kubelet API","permalink":"/k8s_security/docs/attack_vectors/exposed_kubelet_api"}}');var r=i(4848),t=i(8453);const a={sidebar_position:8,title:"Insecure RBAC Permissions",description:"Understanding how overly permissive RBAC configurations can lead to unauthorized access and privilege escalation in Kubernetes."},c="Insecure RBAC Permissions",o={},l=[{value:"Exploitation Steps: Gaining Unauthorized Access via Misconfigured RBAC",id:"exploitation-steps-gaining-unauthorized-access-via-misconfigured-rbac",level:2},{value:"Step 1: Identify Open Permissions",id:"step-1-identify-open-permissions",level:3},{value:"Step 2: Impersonate a More Privileged User",id:"step-2-impersonate-a-more-privileged-user",level:3},{value:"Step 3: Gain Cluster-Wide Access",id:"step-3-gain-cluster-wide-access",level:3},{value:"Step 4: Execute Arbitrary Commands",id:"step-4-execute-arbitrary-commands",level:3},{value:"Result",id:"result",level:3},{value:"Mitigation Steps",id:"mitigation-steps",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"insecure-rbac-permissions",children:"Insecure RBAC Permissions"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Role-Based Access Control (RBAC)"})," is a fundamental security mechanism in Kubernetes, used to define ",(0,r.jsx)(s.strong,{children:"who"})," can perform ",(0,r.jsx)(s.strong,{children:"what actions"})," on ",(0,r.jsx)(s.strong,{children:"which resources"}),". When RBAC is ",(0,r.jsx)(s.strong,{children:"misconfigured or overly permissive"}),", attackers can escalate privileges, access sensitive resources, and compromise the entire cluster."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"exploitation-steps-gaining-unauthorized-access-via-misconfigured-rbac",children:"Exploitation Steps: Gaining Unauthorized Access via Misconfigured RBAC"}),"\n",(0,r.jsxs)(s.p,{children:["An attacker exploits weak RBAC settings to gain ",(0,r.jsx)(s.strong,{children:"elevated permissions"})," within the cluster."]}),"\n",(0,r.jsx)(s.h3,{id:"step-1-identify-open-permissions",children:"Step 1: Identify Open Permissions"}),"\n",(0,r.jsx)(s.p,{children:"The attacker lists RBAC roles and bindings using an existing low-privilege account:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"kubectl get roles,rolebindings,clusterroles,clusterrolebindings -A\n"})}),"\n",(0,r.jsxs)(s.p,{children:["If a ",(0,r.jsx)(s.strong,{children:"RoleBinding"})," or ",(0,r.jsx)(s.strong,{children:"ClusterRoleBinding"})," grants excessive permissions, the attacker identifies a potential escalation path."]}),"\n",(0,r.jsx)(s.h3,{id:"step-2-impersonate-a-more-privileged-user",children:"Step 2: Impersonate a More Privileged User"}),"\n",(0,r.jsxs)(s.p,{children:["If ",(0,r.jsx)(s.code,{children:"impersonate"})," privileges are granted, the attacker can act as a more privileged user:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"kubectl auth can-i '*' '*' --as=admin\n"})}),"\n",(0,r.jsx)(s.h3,{id:"step-3-gain-cluster-wide-access",children:"Step 3: Gain Cluster-Wide Access"}),"\n",(0,r.jsxs)(s.p,{children:["If the attacker finds a misconfigured ",(0,r.jsx)(s.code,{children:"ClusterRoleBinding"})," granting ",(0,r.jsx)(s.code,{children:"cluster-admin"})," access, they escalate privileges:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"kubectl create clusterrolebinding attacker-admin --clusterrole=cluster-admin --user=attacker\n"})}),"\n",(0,r.jsx)(s.h3,{id:"step-4-execute-arbitrary-commands",children:"Step 4: Execute Arbitrary Commands"}),"\n",(0,r.jsxs)(s.p,{children:["Once the attacker has ",(0,r.jsx)(s.code,{children:"cluster-admin"})," privileges, they can execute commands across the cluster:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"kubectl exec -it <pod-name> -- /bin/sh\nkubectl delete namespace production\n"})}),"\n",(0,r.jsx)(s.h3,{id:"result",children:"Result"}),"\n",(0,r.jsxs)(s.p,{children:["The attacker now has ",(0,r.jsx)(s.strong,{children:"full administrative access"}),", enabling them to modify workloads, exfiltrate data, or delete entire namespaces."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"mitigation-steps",children:"Mitigation Steps"}),"\n",(0,r.jsx)(s.p,{children:"To secure RBAC configurations and prevent privilege escalation, follow the security best practices outlined in:"}),"\n",(0,r.jsxs)(s.p,{children:["\u27a1 ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/best_practices/cluster_setup_and_hardening/insecure_rbac_permissions_mitigation",children:"Securing RBAC Permissions"})})]}),"\n",(0,r.jsxs)(s.p,{children:["This guide covers techniques such as ",(0,r.jsx)(s.strong,{children:"principle of least privilege, role scoping, avoiding wildcard permissions, and enforcing least privilege bindings"})," to mitigate RBAC security risks."]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>a,x:()=>c});var n=i(6540);const r={},t=n.createContext(r);function a(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);